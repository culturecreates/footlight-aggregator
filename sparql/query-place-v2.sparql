# Used to get place data to load into CMS
#
# INPUTS: 
#   uri_placeholder: the place with complete external uri starting with http
#
# CHANGE LOG: 
#  - v2 allows external uri for Place
#
# NOTES:
# - When loading events into CMS, the aggregator code checks each event's location.
# - If a location is not already in CMS then aggregator calls this query to load the place data.
# - The Place URI can be a K-number or an external URI

PREFIX adr: <http://kg.artsdata.ca/resource/> 
PREFIX schema: <http://schema.org/> 
PREFIX ado: <http://kg.artsdata.ca/ontology/> 
construct {
    ?id ?p ?o .
    ?id a schema:Place .
    ?id schema:geo ?id_geo .
    ?id_geo schema:longitude ?longitude .
    ?id_geo schema:latitude ?latitude .
    ?id_geo a schema:GeoCoordinates .
    ?id schema:address ?address .
    ?address schema:addressLocality ?addressLocality .
    ?address schema:addressCountry  ?addressCountry .
    ?address schema:addressRegion ?addressRegion .
    ?address schema:streetAddress ?streetAddress .
    ?address schema:postalCode ?postalCode .
    ?id schema:image ?id_imageObject .
    ?id_imageObject schema:url ?image_uri .
}
where {
    graph ?g {
        values ?p {
            schema:name 
            schema:description 
            schema:alternateName 
            schema:disambiguatingDescription
            schema:sameAs
            schema:url
        }
        values ?id {
            <uri_placeholder>
        }
        ?id ?p ?o .
        ?id schema:address ?address .
        OPTIONAL {
            ?address schema:addressLocality ?addressLocality .

        }
       
        OPTIONAL {
            ?address schema:addressCountry ?addressCountry .
           
        } 
       
        OPTIONAL {
            ?address schema:addressRegion ?addressRegion .
           
        }
      
        OPTIONAL {
            ?address schema:streetAddress ?streetAddress .
           
        }
       
        OPTIONAL {
            ?address schema:postalCode ?postalCode .
        } 
        OPTIONAL {
            ?id schema:longitude ?longitude ;
                schema:latitude ?latitude .
            bind(URI(concat(str(?id),"#GeoCoordinates")) as ?id_geo) 
        } 
        OPTIONAL {
            ?id schema:image ?image  .
            bind(URI(concat(str(?id),"#imageObject")) as ?id_imageObject) 
            bind(URI(?image) as ?image_uri)
        } 
    }
}
